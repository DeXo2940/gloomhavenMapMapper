@startuml GloomhavenUML
    hide empty members
    skinparam {
        linetype ortho
        wrapWidth 260
        ' default 60, line length
        ranksep 30
        ' default 35, separation of boxes
        nodesep 35
    }
    
    abstract DbStructure {
        +{abstract}{static}create_from_dict(object_dict: dict[str, Any] ) -> DbStructure 
        +{abstract}to_dict() -> dict[str, Any]
        +{abstract}get_key() -> Any
    }

    class Scenario extends DbStructure{
        -_id: int
        +coordinates: Coordinates
        +name: str 
        +blockers: list[Requirement]
        +notes: str

        +{static}create(int id, Coordinates coordinates, str name) -> Scenario
        +{static}create_empty(id: int) -> Scenario
        +<color:#CornflowerBlue>{static}create_from_dict(object_dict:dict[str, Any]) -> Scenario
        +id() -> int 
        +add_blocker(blocker: Requirement )
        +<color:#CornflowerBlue>to_dict() -> dict[str, Any]
        +<color:#CornflowerBlue>get_key() -> Any <<_id>>
    } 

    struct Coordinates {
        +x: str
        +y: int

        +{static}create(str x, int y) -> Coordinates
        +{static}create_by_string(str coordinates) -> Coordinates
        +__str__() -> str
    }

    class Requirement extends DbStructure {
        +achievement: Achievement 
        +is_done: bool 
        +level: int|None 
        +achievement: Achievement

        +{static}create(achievement: Achievement, is_done: bool,level: int|None) -> Requirement
        +<color:#CornflowerBlue>{static}create_from_dict(object_dict:dict[str, Any]) -> Requirement
        +<color:#CornflowerBlue>to_dict() -> dict[str, Any]
        +<color:#CornflowerBlue>get_key() -> Any <<whole_object>>
    }

    class Achievement extends DbStructure{
        -_id: int.next
        +name: str
        +<color:#Salmon>type: AchievementType

        +{static}create(str name, AchievementType type) -> Achievement
        +<color:#CornflowerBlue>{static}create_from_dict(object_dict:dict[str, Any]) -> Achievement
        +id() -> int
        +<color:#CornflowerBlue>to_dict() -> dict[str, Any]
        +<color:#CornflowerBlue>get_key() -> Any <<_id>>
    }
        
    Enum AchievementType <<enum>> {
        **TEAM**
        **GLOBAL**
    }

    interface NoSQLDbAccess{
        +find(filter: filter)
        +update_one(object: DatabaseObject)
        +update_bulk(objects: list[DatabaseObject])
    }

    class MongoDbAccess implements NoSQLDbAccess{
        +{static}create(document_name: str): MongoDbAccess
        +<color:#BlueViolet>find(filter: filter)
        +<color:#BlueViolet>update_one(object: DatabaseObject)
        +<color:#BlueViolet>update_bulk(objects: list[DatabaseObject])
    }

    class Scenario_DAO <<singleton>> {
        -_scenarios: list[Scenario]
        
        +{static}get_instance(db_access: NoSQLDbAccess) -> Scenario_DAO
        +scenarios() -> list[Scenario]
        +find_by_id() -> DbStructure
        +save(scenario: Scenario)
        +save_all()
        +load_all()
    }

    class Achievement_DAO <<singleton>> {
        -_achievements: list[Achievement]
        
        +{static}get_instance(db_access: NoSQLDbAccess) -> Achievement_DAO
        +achievements() -> list[Achievement]
        +find_by_id() -> DbStructure
        +save(achievement: Achievement)
        +save_all()
        +load_all()
    }

    exception GloomhavenException <<Exception>>{
        +message : str
    }
    exception CoordinatesException extends GloomhavenException
    exception RequirementException extends GloomhavenException
    exception ScenarioException extends GloomhavenException
    
    'Dependency
    NoSQLDbAccess ..> DbStructure
       
    Achievement_DAO ..> Achievement
    Scenario_DAO ..> Scenario

    Requirement ..> RequirementException : <<Throws>>
    Coordinates ..> CoordinatesException : <<Throws>>
    Scenario ..> ScenarioException : <<Throws>>

    NoSQLDbAccess --o Scenario_DAO
    NoSQLDbAccess --o Achievement_DAO

    Achievement o-- AchievementType
    ' AchievementType --o Achievement

    Scenario *-- Coordinates
    ' Coordinates --* Scenario

    Scenario  o- "n" Requirement
    Requirement o- Achievement
    ' Achievement --o Requirement

@enduml