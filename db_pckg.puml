@startuml DbPckgUML
    !include commons.wsd!
    
    package db_pckg{
        enum DbFilterOperator <<enum>> {
            **EQUAL**
            **GREATER**
            **GREATER_EQUAL**
            **LESS_THAN**
            **LESS_THAN_EQUAL**
            **NOT_EQUAL**
            **CONTAIN_PATTERN**
            **IN**
            **NOT_IN**
        }

        class DbSingleFilter{
            +field:str
            +operator: DbFilterOperator
            +value: str|int|list[str|int]

            +{static}createfield: str, operator: DbFilterOperator, value: Any) -> DbSingleFilter
        }

        abstract DbFilter{
            #filters: list[DbSingleFilter]

            +add_filter(filter: DbSingleFilter) -> None
            +{abstract}translate_for_db() -> dict[str, dict[str, Any]]:
        }

        class MognoDbFilter implements DbFilter{
            **OPERATION_TRANSLATION**: dict[DbFilterOperator, str]

            +{static}create(ilters: list[DbSingleFilter] = []) -> MognoDbFilter
            +<color:#BlueViolet>translate_for_db() -> dict[str, dict[str, Any]]
        }

        interface DbAccess{
            +{abstract}find_single(key: DbFilter) -> dict[str, Any]
            +{abstract}find(filter: DbFilter|None) -> list[dict[str, Any]]
            +{abstract}update_one(object: DbStructure) -> None
            +{abstract}update_bulk(objects: list[DbStructure]) -> None
        }
        class MongoDbAccess implements DbAccess{
            -_client: MongoClient
            -_database: database.Database[Any]
            -_collection: collection.Collection[Any]

            +{static}create(connection_string: str, database_name: str, collection_name: str, //timeout_ms: int//, //test_timeout_ms: int//, //connection_retries: int//) -> MongoDbAccess
            +<color:#BlueViolet>find_single(key: DbFilter) -> dict[str, Any]
            +<color:#BlueViolet>find(filter: DbFilter|None) -> list[dict[str, Any]]
            +<color:#BlueViolet>update_one(object: DbStructure) -> None
            +<color:#BlueViolet>update_bulk(objects: list[DbStructure]) -> None
        }
        abstract DbStructure {
            ' +{abstract}{static}create_from_dict(object_dict: dict[str, Any], composing_dao: Any) -> DbStructure 
            +{abstract}to_dict() -> dict[str, Any]
            +{abstract}get_key_value() -> DbFilter
        }
        abstract UniqueKeyDbStructure extends DbStructure{
            #id: int
            ' +id() -> int 
            +<color:#CornflowerBlue>get_key_value() -> DbFilter <<_id>>
        }
        class MongoConnectionTester{
            -_client:MongoClient
            -_connection_string: str
            -_test_timeout_ms: int
            -_connection_retries: int
            +{static}create(client: MongoClient, connection_string: str, test_timeout_ms: int,connection_retries: int)
            +test_connection() -> None
        }
        ' Exceptions
        together {
            exception DbException <<Exception>>{
                +message : str
            }

            MongoConnectionTester ..> DbException : <<Throws>>
            MognoDbFilter ..> DbException : <<Throws>>
            DbSingleFilter ..> DbException : <<Throws>>
        }
        
        DbAccess ..> DbStructure
        MongoDbAccess *-- MongoConnectionTester
        
        DbFilter o-- DbSingleFilter
        
        DbStructure ..> DbFilter

        ' DbFilterOperator --o DbSingleFilter
        ' DbFilterOperator --o MognoDbFilter
        DbSingleFilter o-- DbFilterOperator
        MognoDbFilter o-- DbFilterOperator
        
    }

@enduml