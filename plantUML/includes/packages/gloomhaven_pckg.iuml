
!include ../common/procedures.iuml

package gloomhaven_model_pckg{}

package gloomhaven_pckg{
    
    class Scenario<<gloomhaven_pckg>>{
        #id: int
        +coordinates: Coordinates
        +name: str 
        +blockers: list[Requirement]
        +notes: str

        +{static}create(int id, Coordinates coordinates, str name) -> Scenario
        +{static}create_empty(id: int) -> Scenario
        
        +add_blocker(blocker: Requirement ) -> None
        +remove_blocker(self, blocker: Requirement) -> None
    } 

    struct Coordinates<<gloomhaven_pckg>>{
        +x: str
        +y: int

        +{static}create(str x, int y) -> Coordinates
        +{static}create_by_string(str coordinates) -> Coordinates
        +__str__() -> str
    }

    class Requirement<<gloomhaven_pckg>>{
        +achievement: Achievement 
        +is_done: bool 
        +level: int|None

        +{static}create(achievement: Achievement, is_done: bool,level: int|None) -> Requirement
    }

    class Achievement<<gloomhaven_pckg>>{
        #id: int
        +name: str
        +type: AchievementType

        +{static}create(name: str, type: AchievementType) -> Achievement
    }
        
    Enum AchievementType<<gloomhaven_pckg>>{
        **TEAM**
        **GLOBAL**
    }

    class ScenarioRepository<<gloomhaven_pckg>>{
        $singleton()
        +language: str
        
        +{static}get_instance() -> ScenarioRepository
        +create(scenario: Scenario, achievement_repository: AchievementRepository) -> Scenario
        +read() -> list[Scenario]
        +read_by_id(id: int) -> Scenario
        +update(scenario: Scenario) -> Scenario
        +delete(scenario: Scenario) -> None
    }

    class AchievementRepository<<gloomhaven_pckg>>{
        $singleton()
        +language: str
        
        +{static}get_instance() -> AchievementRepository
        +create(achievement: Achievement) -> Achievement
        +read() -> list[Achievement]
        +read_by_id(id: int) -> Achievement
        +read_by_name(name: str) -> Achievement
        +update(achievement: Achievement) -> Achievement
        +delete(achievement: Achievement) -> None
    }

    ' Exceptions
    together {
        exception GloomhavenException <<gloomhaven_pckg>>{
            +message : str
        }
        exception CoordinatesException extends GloomhavenException
        exception ScenarioException extends GloomhavenException
        exception RequirementException extends GloomhavenException
        exception AchievementException extends GloomhavenException

        $throws(Requirement, RequirementException)
        $throws(Coordinates, CoordinatesException)
        $throws(Scenario, ScenarioException)
        $throws(Achievement, AchievementException)

        hide <<gloomhaven_pckg>> stereotype
    }

    'Dependency
    ScenarioRepository ..> Scenario
    ScenarioRepository ..> AchievementRepository
    AchievementRepository ..> Achievement
    
    Scenario "1" o- "n" Requirement
    Requirement o- Achievement

    Achievement o- AchievementType
    Scenario *-- Coordinates
    
    ScenarioRepository ..> gloomhaven_model_pckg.Scenario
    ScenarioRepository ..> gloomhaven_model_pckg.Restriction

    AchievementRepository ..> gloomhaven_model_pckg.Achievement

    ' ' hidden lines for aesthetics only
    ' Achievement -[hidden]- GloomhavenException

    hide <<gloomhaven_pckg>> stereotype
}