
!include ../common/procedures.iuml

package db_pckg{
    enum DbFilterOperator <<db_pckg>>{
        **EQUAL**
        **GREATER**
        **GREATER_EQUAL**
        **LESS_THAN**
        **LESS_THAN_EQUAL**
        **NOT_EQUAL**
        **CONTAIN_PATTERN**
        **IN**
        **NOT_IN**
    }

    class DbSingleFilter<<db_pckg>>{
        +field:str
        +operator: DbFilterOperator
        +value: str|int|list[str|int]

        +{static}create(field: str, operator: DbFilterOperator, value: Any) -> DbSingleFilter
    }

    class DbGenericFilter<<db_pckg>>{
        #filters: list[DbSingleFilter]

        +{static}create($optional("filters: list[DbSingleFilter]"))
        +add_filter(filter: DbSingleFilter) -> None
        +remove_filter(filter: DbSingleFilter) -> None
        +remove_filtes() -> None
    }

    abstract DbFilter<<db_pckg>> implements DbGenericFilter{
        +{abstract}translate_for_db() -> dict[str, dict[str, Any]]:
    }

    class MognoDbFilter<<db_pckg>> implements DbFilter{
        **OPERATION_TRANSLATION**: dict[DbFilterOperator, str]

        +{static}create(ilters: list[DbSingleFilter] = []) -> MognoDbFilter
        +{static}create_by_generiv(db_generic_filter: DbGenericFilter) -> MognoDbFilter
        $implementation()translate_for_db() -> dict[str, dict[str, Any]]
    }

    interface DbAccess<<db_pckg>>{
        +{abstract}find_single(key: DbFilter) -> dict[str, Any]
        +{abstract}find(filter: DbFilter|None) -> list[dict[str, Any]]
        +{abstract}update(object: DbStructure) -> None
        +{abstract}update_bulk(objects: list[DbStructure]) -> None
        +{abstract}delete(object: DbStructure) -> None
        +{abstract}delete_bulk(objects: list[DbStructure]) -> None
    }
    class MongoDbAccess<<db_pckg>> implements DbAccess{
        -_client: MongoClient
        -_database: database.Database[Any]
        -_collection: collection.Collection[Any]

        +{static}create(connection_string: str, database_name: str, colection_name: str, $optional("timeout_ms: int"), $optional("test_timeout_ms: int"), $optional("connection_retries: int")) -> MongoDbAccess
        $implementation()find_single(key: DbFilter) -> dict[str, Any]
        $implementation()find(filter: DbFilter|None) -> list[dict[str, Any]]
        $implementation()update(object: DbStructure) -> None
        $implementation()update_bulk(objects: list[DbStructure]) -> None
        $implementation()delete(object: DbStructure) -> None
        $implementation()delete_bulk(objects: list[DbStructure]) -> None
    }
    interface DbStructure<<db_pckg>>{
        +{abstract}to_dict() -> dict[str, Any]
        +{abstract}get_key_value() -> DbFilter
    }
    abstract UniqueKeyDbStructure<<db_pckg>> extends DbStructure{
        #id: int
        $implementation()get_key_value() -> DbFilter [_id]
    }
    class MongoConnectionTester<<db_pckg>>{
        -_client:MongoClient
        -_connection_string: str
        -_test_timeout_ms: int
        -_connection_retries: int
        +{static}create(client: MongoClient, connection_string: str, test_timeout_ms: int,connection_retries: int)
        +test_connection() -> None
    }
    ' Exceptions
    together {
        exception DbException <<db_pckg>>{
            +message : str
        }
        
        $throws(MongoConnectionTester, DbException)
        $throws(MognoDbFilter, DbException)
        $throws(DbSingleFilter, DbException)
        
        hide <<db_pckg>> stereotype
    }
    
    DbAccess ..> DbStructure
    MongoDbAccess *-- MongoConnectionTester
    
    DbFilter o-- DbSingleFilter
    
    DbStructure ..> DbGenericFilter

    DbFilterOperator --o DbSingleFilter
    DbFilterOperator --o MognoDbFilter

    DbAccess ..> DbFilter
    MongoDbAccess ..> MognoDbFilter

    MognoDbFilter --> DbGenericFilter
    ' DbSingleFilter o-- DbFilterOperator
    ' MognoDbFilter o-- DbFilterOperator

    hide <<db_pckg>> stereotype
}